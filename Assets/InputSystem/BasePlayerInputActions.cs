//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem/BasePlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BasePlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BasePlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BasePlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""FPSMap"",
            ""id"": ""d1e10d0f-d68c-49ec-80d4-a721922fa854"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""427f8693-04a5-4550-88ba-835d666f7fa6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""View"",
                    ""type"": ""Value"",
                    ""id"": ""4d5b0bb4-a007-4bd4-a573-c907c705c226"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""5c3daee0-4899-43c4-ba08-fcda1f76dd67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""6410e3f2-03de-4452-966a-98af5de0faf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchMode"",
                    ""type"": ""Button"",
                    ""id"": ""c1712d66-65d8-4ebe-8d31-669ae000b718"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Download"",
                    ""type"": ""Button"",
                    ""id"": ""23ab0c6f-7a1c-465e-a5db-720cde7e859c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""64fdafcc-d4fd-419e-8b6d-8ec4ab133f45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""8786f16f-1ffa-48c9-8ff1-c3f477fb92f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3e086c43-a075-4b5d-a1e7-078ace6d9fe9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""68b2de83-9c82-47d3-925e-aa09449a292e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""28c51ac2-67f9-4dd7-ad17-b79a99fe761c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bf0d5273-c1f6-4de0-bc5b-f894baa78648"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3fcbd925-a40e-4ec4-9f2a-fb4da343267e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7aedea20-940f-44bb-b9eb-3772e3ce9380"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab763ef8-da65-4a03-86c5-a5dfc0fcf548"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f92b566d-332f-46ef-b27b-5c7675396555"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b804d03-0574-4821-b93d-4f4d8a9dde7e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bd90f1c-f58f-47a2-a94a-4821093eb497"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Download"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f19d74f0-d670-45e7-a7ac-08aad8da20b3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20bd8998-395f-416b-a4ae-f9090ef53ce4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSMap
        m_FPSMap = asset.FindActionMap("FPSMap", throwIfNotFound: true);
        m_FPSMap_Movement = m_FPSMap.FindAction("Movement", throwIfNotFound: true);
        m_FPSMap_View = m_FPSMap.FindAction("View", throwIfNotFound: true);
        m_FPSMap_Drag = m_FPSMap.FindAction("Drag", throwIfNotFound: true);
        m_FPSMap_Action = m_FPSMap.FindAction("Action", throwIfNotFound: true);
        m_FPSMap_SwitchMode = m_FPSMap.FindAction("SwitchMode", throwIfNotFound: true);
        m_FPSMap_Download = m_FPSMap.FindAction("Download", throwIfNotFound: true);
        m_FPSMap_Release = m_FPSMap.FindAction("Release", throwIfNotFound: true);
        m_FPSMap_Rotate = m_FPSMap.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSMap
    private readonly InputActionMap m_FPSMap;
    private List<IFPSMapActions> m_FPSMapActionsCallbackInterfaces = new List<IFPSMapActions>();
    private readonly InputAction m_FPSMap_Movement;
    private readonly InputAction m_FPSMap_View;
    private readonly InputAction m_FPSMap_Drag;
    private readonly InputAction m_FPSMap_Action;
    private readonly InputAction m_FPSMap_SwitchMode;
    private readonly InputAction m_FPSMap_Download;
    private readonly InputAction m_FPSMap_Release;
    private readonly InputAction m_FPSMap_Rotate;
    public struct FPSMapActions
    {
        private @BasePlayerInputActions m_Wrapper;
        public FPSMapActions(@BasePlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FPSMap_Movement;
        public InputAction @View => m_Wrapper.m_FPSMap_View;
        public InputAction @Drag => m_Wrapper.m_FPSMap_Drag;
        public InputAction @Action => m_Wrapper.m_FPSMap_Action;
        public InputAction @SwitchMode => m_Wrapper.m_FPSMap_SwitchMode;
        public InputAction @Download => m_Wrapper.m_FPSMap_Download;
        public InputAction @Release => m_Wrapper.m_FPSMap_Release;
        public InputAction @Rotate => m_Wrapper.m_FPSMap_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_FPSMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSMapActions set) { return set.Get(); }
        public void AddCallbacks(IFPSMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @View.started += instance.OnView;
            @View.performed += instance.OnView;
            @View.canceled += instance.OnView;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @SwitchMode.started += instance.OnSwitchMode;
            @SwitchMode.performed += instance.OnSwitchMode;
            @SwitchMode.canceled += instance.OnSwitchMode;
            @Download.started += instance.OnDownload;
            @Download.performed += instance.OnDownload;
            @Download.canceled += instance.OnDownload;
            @Release.started += instance.OnRelease;
            @Release.performed += instance.OnRelease;
            @Release.canceled += instance.OnRelease;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IFPSMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @View.started -= instance.OnView;
            @View.performed -= instance.OnView;
            @View.canceled -= instance.OnView;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @SwitchMode.started -= instance.OnSwitchMode;
            @SwitchMode.performed -= instance.OnSwitchMode;
            @SwitchMode.canceled -= instance.OnSwitchMode;
            @Download.started -= instance.OnDownload;
            @Download.performed -= instance.OnDownload;
            @Download.canceled -= instance.OnDownload;
            @Release.started -= instance.OnRelease;
            @Release.performed -= instance.OnRelease;
            @Release.canceled -= instance.OnRelease;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IFPSMapActions instance)
        {
            if (m_Wrapper.m_FPSMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSMapActions @FPSMap => new FPSMapActions(this);
    public interface IFPSMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnSwitchMode(InputAction.CallbackContext context);
        void OnDownload(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
